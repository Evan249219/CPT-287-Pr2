	public static int evaluatePostfix (String str) {
		
		//create a stack
		Stack<Integer> stack = new Stack<>();
		
		//scan all characters in str
		for(int i = 0; i < str.length(); i++) {
			char scan = str.charAt(i);
			
			//if scan is a number, push to stack
			if(Character.isDigit(scan)) {
				stack.push(scan - '0');
			}
			
			//else the character is an operator, pop 2 elements and apply operator
			else {
				int val1 = stack.pop();
				int val2 = stack.pop();
				
				
				/** Returns the precedence of an operator.
	 			* @param operator: the operator to find its precedence
	 			* @return: the precedence of the operator
	 			*/
				public static int precedence(String operator) {
					//Set each operators precedence
					//The higher the precedence the higher int returned
					if (operator.equals("^")) { return 7; }
					if (operator.equals("*") || operator.equals("/") || operator.equals("%")) { return 6; }
					if (operator.equals("+") || operator.equals("-")) { return 5; }
					if (operator.equals("<") || operator.equals("<=") || operator.equals(">") || operator.equals(">=")) { return 4; }
					if (operator.equals("==") || operator.equals("!=")) { return 3; }
					if (operator.equals("&&")) { return 2; }
					if (operator.equals("||")) { return 1; }
					// Throw exception for non supported operators
					throw new IllegalArgumentException(String.format("Operator %s is not a valid operator.", operator));
				}
				//using a switch case until that is coded
				switch(scan) {
				case '+':
				stack.push(val2 + val1);
				break;
				
				case '-':
					stack.push(val2 +val1);
					break;
				
				case '/':
					if (val1 == 0) {
						System.out.println("Cannot divide by zero.");
						break;
					}
					else {
						stack.push(val2 / val1);
						break;
					}
				
				case '*':
					stack.push(val2 * val1);
					break;
				
				}	
			}
		
		}
		
		return stack.pop();



	}
